// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2832.Robot2017;

import org.usfirst.frc2832.Robot2017.commands.auton.AutonCommandGroup;
import org.usfirst.frc2832.Robot2017.commands.auton.ParseInput;
import org.usfirst.frc2832.Robot2017.commands.Climb;
import org.usfirst.frc2832.Robot2017.commands.InterfaceFlip;
import org.usfirst.frc2832.Robot2017.commands.shooter.ShooterSequenceOff;
//import org.usfirst.frc2832.Robot2017.pixy.PixyException;
//import org.usfirst.frc2832.Robot2017.pixy.PixyI2C;
//import org.usfirst.frc2832.Robot2017.pixy.PixyPacket;
import org.usfirst.frc2832.Robot2017.subsystems.BallIntake;
import org.usfirst.frc2832.Robot2017.subsystems.Climbing;
import org.usfirst.frc2832.Robot2017.subsystems.DriveTrain;
import org.usfirst.frc2832.Robot2017.subsystems.GearIntake;
import org.usfirst.frc2832.Robot2017.subsystems.GearScore;
import org.usfirst.frc2832.Robot2017.subsystems.Lights;
import org.usfirst.frc2832.Robot2017.subsystems.Shooter;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static DriveTrain driveTrain;
    public static BallIntake ballIntake;
    public static Climbing climb;
    public static GearIntake gearIntake;
    public static GearScore gearScore;
    public static Shooter shooter;
    public static Lights lights;
    public static boolean isClimbing = false;
    public static boolean isIngesting = false;
    public static NavX navX;
    public static double lTrigger, rTrigger;
    public static int shootSpeeed = 2950, pov;
    public static DigitalInput distSensor;
    public static SendableChooser<String> auto;
    public static PowerDistributionPanel pdp;
    public static int camera = 0;
 
    public static I2C pixyCamera;
    public static Port port;
    public static byte[] buffer;
    public static int pixyValue;
    public static double lastPixyRead = 0;

    public void robotInit() {
    	RobotMap.init();
    	setBrakeMode(false);
        
        navX = new NavX();
    	distSensor = new DigitalInput(0);
    	port = Port.kOnboard;
    	pixyCamera = new I2C(port, 63);// 42);
    	pixyValue = (byte) 300;
    	buffer = new byte[1];
    	
	    new Thread(() -> {
	    	UsbCamera c0 = CameraServer.getInstance().startAutomaticCapture(0);
	    	c0.setVideoMode(new edu.wpi.cscore.VideoMode(edu.wpi.cscore.VideoMode.PixelFormat.kMJPEG, 160, 120, 30));
	    	UsbCamera c1 = CameraServer.getInstance().startAutomaticCapture(1);
	    	c1.setVideoMode(new edu.wpi.cscore.VideoMode(edu.wpi.cscore.VideoMode.PixelFormat.kMJPEG, 160, 120, 30));
	    	while(true) {
	    		if(camera == 0) {
	    			NetworkTable.getTable("").putString("c", c0.getName());
	    		} else {
	    			NetworkTable.getTable("").putString("c", c1.getName());
	    		}
	    		try {
					Thread.sleep(20);
				} catch (InterruptedException e) {

				}
	    	}
	    }).start();

        driveTrain = new DriveTrain();
        ballIntake = new BallIntake();
        climb = new Climbing();
        gearIntake = new GearIntake();
        gearScore = new GearScore();
        shooter = new Shooter();
        lights = new Lights();

        oi = new OI();
        pdp = new PowerDistributionPanel();

        auto = new SendableChooser<>();
        auto.addDefault("Do nothing at all", "0");
        auto.addObject("Expel Gear from Center (practice bot)", "e9");
        auto.addObject("Expel Gear from Center (actual bot)", "d6"); //4 = 80 in for practice bot
        auto.addObject("Drive Forward from left or right position (practice bot)", "c5");
        auto.addObject("Drive Forward from left or right position (actual bot)", "b4");
        auto.addObject("Expel Gear From left NavX(practice bot)", "h3");
        auto.addObject("Expel Gear From left NavX(actual bot)", "g3");
        auto.addObject("Expel Gear From right NavX(practice bot)", "i3");
        auto.addObject("Expel Gear From right NavX(actual bot)", "a3");
        auto.addObject("autonAimGear", "j7");
        auto.addObject("Mr. Zobel Testing", "z0");
        autonomousCommand = new AutonCommandGroup(ParseInput.takeInput(auto.getSelected()));

    }

    public void disabledInit(){
    	GearScore.gearScoreDoor.set(DoubleSolenoid.Value.kForward);
    	setBrakeMode(false);
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	setBrakeMode(true);
    	DriveEncoders.intializeEncoders();
    	RobotMap.driveTrainRightFront.setPosition(0);
    	RobotMap.driveTrainLeftFront.setPosition(0);
    	System.out.print(auto.getSelected());
    	autonomousCommand = new AutonCommandGroup(ParseInput.takeInput(auto.getSelected()));
    	if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        if (! Robot.pixyCamera.read(0, 1, buffer)) {
    		  pixyValue =  buffer[0] & 0xFF;
    		  // don't count incorrect values as read
    		  if (pixyValue != 255)
    		      lastPixyRead = Timer.getFPGATimestamp();
        }
        SmartDashboard.putNumber("Pixy X value", pixyValue  );
    }

    public void teleopInit() {
    	DriveEncoders.intializeEncoders();
    	GearScore.gearScoreDoor.set(DoubleSolenoid.Value.kForward);
    	setBrakeMode(true);
    	InterfaceFlip.isFlipped = false;
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null)
            autonomousCommand.cancel();
    }

    //This function is called periodically during operator control
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        if (! Robot.pixyCamera.read(0, 1, buffer))
        	pixyValue =  buffer[0] & 0xFF;
		

   
        lTrigger = oi.getXBoxController().getRawAxis(2);
        rTrigger = oi.getXBoxController().getRawAxis(3);
        pov = oi.getXBoxController().getPOV(0);
        
        /* Climbing control - variable on Left Trigger */
        if(lTrigger > 0.1)
        	new Climb().start();
        
        /* Shooting Balls - Right Trigger */
        if(rTrigger > 0.1)
        		shooter.trigger();
        else
        	new ShooterSequenceOff().start();
        
        if (isIngesting) {
    		BallIntake.ballIntakeMotor.set(0.3);
    	} else {
    		BallIntake.ballIntakeMotor.set(0);
    	}
        
        /* Allow adjusting Speed of Shooter Motor to test distance */
        //if(pov == -1) {
       	//	povActivated = false;
        //} else {
        	if (pov != -1)
        		if(pov > 90 && pov < 270) {
        			shootSpeeed--;
        		} else {
        			shootSpeeed++;
        		}
        				
        //}
        SmartDashboard.putNumber("Shooting speeed", shootSpeeed);
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
    
    private void setBrakeMode(boolean b) {
    	RobotMap.driveTrainLeftFront.enableBrakeMode(b);
    	RobotMap.driveTrainRightFront.enableBrakeMode(b);
    	RobotMap.driveTrainLeftRear.enableBrakeMode(b);
    	RobotMap.driveTrainRightRear.enableBrakeMode(b);
    }
}
